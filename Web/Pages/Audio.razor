@page "/audio"
@using SubtitleDubber.Services
@using SubtitleDubber.Models
@using SubtitleDubber.Parsers
@using Web.Data
@using System.IO

@inject NavigationManager Navigation
<PageTitle>Subtitle Dubber</PageTitle>
        <div class="col-md-8 mx-auto">
                <div class="card" style="margin: auto; max-width: 500px; min-height: 16rem;">
        <div class="card-body">
                        <h1>Subtitle Options</h1>
            <label for="subtitle">Select which subtitle stream to use for making audio track:</label>
            <select id="subtitle" @bind="@_selectedSubtitleId" @bind:after="EnableGetSubtitleButton">
                <option value="-1"></option>

                @if (_subtitleList != null)
                {
                    foreach (var subtitle in _subtitleList)
                    {
                        <option value="@subtitle.Id">@subtitle</option>
                    }
                }
            </select>
            <label for="subtitleFormat">Subtitle format:</label>
            <select id="subtitleFormat" @bind="_selectedSubtitleFormat">
                @if (_supportedSubtitleFormats != null)
                {
                    foreach (var format in _supportedSubtitleFormats)
                    {
                        <option value="@format.Extension">@format</option>
                    }
                }
            </select>
            <button class="btn btn-primary align-bottom" type="button" disabled=@_isSubtitleButtonDisabled @onclick="SelectOutputSubtitleFile">Extract</button>
            <p>Or you can attach your own subtitle file.</p>
            <button class="btn btn-primary align-bottom" type="button" @onclick="SelectInputSubtitleFile">@SelectFileButtonText @State.InputSubtitleFileName</button>
            <hr />
<p>Select path where to save modified video file.</p>
            <button class="btn btn align-bottom" type="button" @onclick="SelectOutputVideoFile">@SelectFileButtonText @State.OutputVideoFileName</button>
<button class="btn btn-primary align-bottom" type="button" @onclick="DubAsync" disabled="@((string.IsNullOrEmpty(State.OutputVideoFileName) || State.OutputVideoFileName == NoFileSelected) || (_isSubtitleButtonDisabled && string.IsNullOrEmpty(State.InputSubtitleFileName)) || _isDubbingInProgress)">Dub</button>
            @if (_isDubbingInProgress)
            {
                            <div class="progress mt-2" style="height: 2em;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" style="width: @(_progressValue)%; background-color: #204066;" aria-valuenow="@_progressValue" aria-valuemin="0" aria-valuemax="100">
                    </div>
                    <div>
                        <span id="progressLabel" class="text-muted">Generating audio track...</span>
                    </div>
                </div>
            }
                                </div>
        <NavLink class="btn btn-primary" href="/">Go Back</NavLink>
    </div>
</div>

@code {
    // https://swharden.com/blog/2022-05-29-blazor-loading-progress/

    private DubbingService _dubbingService = new();
    private SubtitleService _subtitleService = new();
    private List<SubtitleStreamDescription> _subtitleList = new();
    private int _selectedSubtitleId = -1, _progressValue = 0;
    private bool _isSubtitleButtonDisabled = true, _isDubbingInProgress = false;
    private const string NoFileSelected = "No file selected";
    private const string SelectFileButtonText = "Select file:";
    private List<FileFormat> _supportedSubtitleFormats = new List<FileFormat>();
    private readonly FileFormat DefaultSubtitleFormat = new(FileFormat.DefaultSubtitleFileExtension, "SubRip");
    private string _selectedSubtitleFormat;

    protected override void OnInitialized()
    {
        _subtitleList = _subtitleService.GetSubtitleList(State.InputVideoFileName);
        State.AppStateChanged += State_AppStateChanged;
        State.InputSubtitleFileName = NoFileSelected;
        State.OutputSubtitleFileName = NoFileSelected;
        if (string.IsNullOrEmpty(State.OutputVideoFileName))
        {
            State.OutputVideoFileName = NoFileSelected;
        }
        FillSupportedFormats();
    }

    private async Task DubAsync()
    {
        _isDubbingInProgress = true;
        var inputSubtitleFileName = State.InputSubtitleFileName != NoFileSelected ? State.InputSubtitleFileName : string.Empty;
        var progress = new Progress<int>(percent =>
        {
            _progressValue = percent;
            StateHasChanged();
        });
        if (string.IsNullOrEmpty(inputSubtitleFileName))
        {
            await Task.Run(() => _dubbingService.Dub(_selectedSubtitleId, State.InputVideoFileName, State.OutputVideoFileName, progress));
                    }
        else
        {
            await Task.Run(() => _dubbingService.Dub(inputSubtitleFileName, State.OutputVideoFileName, progress));
        }
        _isDubbingInProgress = false;
    }

    private void SelectInputSubtitleFile()
    {
        State.AppState = StateType.SelectInputSubtitleFile;
    }

    private void SelectOutputVideoFile()
    {
        State.AppState = StateType.SelectOutputVideoFile;
    }

    private void SelectOutputSubtitleFile()
    {
        State.AppState = StateType.SelectOutputSubtitleFile;
    }

    private void State_AppStateChanged(object sender, EventArgs e)
    {
        StateType appState = (StateType)sender;
        switch (appState)
        {
            case StateType.SelectedOutputSubtitleFile:
                if (!string.IsNullOrEmpty(State.OutputSubtitleFileName))
                {
                    _subtitleService.DownloadSubtitle(State.InputVideoFileName, State.OutputSubtitleFileName, _selectedSubtitleFormat, _selectedSubtitleId);
                }
                break;
            default:
                break;
        }
    }

    private void EnableGetSubtitleButton()
    {
        _isSubtitleButtonDisabled = _selectedSubtitleId < 0;
    }

    private void FillSupportedFormats()
    {
        _supportedSubtitleFormats.Add(DefaultSubtitleFormat);
        _selectedSubtitleFormat = DefaultSubtitleFormat.Extension;
    }
        }