@page "/audio/{Name}/{Rate:int}/{Volume:int}"

@using SubtitleDubber.Services
@using SubtitleDubber.Models
@using Web.Data
@using System.IO

@inject NavigationManager Navigation
<PageTitle>Subtitle Dubber</PageTitle>
        <div class="col-md-8 mx-auto">
                <div class="card" style="margin: auto; max-width: 500px; min-height: 16rem;">
        <div class="card-body">
            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <div class="alert alert-danger">
                    @_error
                </div>
            }
            <h2>Subtitle Options</h2>
            <div class="form-group">
                <label for="subtitle">Select which subtitle stream to use for making audio track:</label>
                <select id="subtitle" class="form-control" @bind="@_selectedSubtitleId" @bind:after="EnableGetSubtitleButton">
                <option value="-1"></option>

                @if (_subtitleList != null)
                {
                    foreach (var subtitle in _subtitleList)
                    {
                        <option value="@subtitle.Id">@subtitle</option>
                    }
                }
            </select>
</div>
            <div class="form-group">
                <label for="subtitleFormat">Subtitle format:</label>
            <select id="subtitleFormat" @bind="_selectedSubtitleFormat">
                @if (_supportedSubtitleFormats != null)
                {
                    foreach (var format in _supportedSubtitleFormats)
                    {
                        <option value="@format.Extension">@format</option>
                    }
                }
            </select>
            <button class="btn btn-primary align-bottom" type="button" disabled=@_isSubtitleButtonDisabled @onclick="SelectOutputSubtitleFile">Extract</button>
            <p>Or you can attach your own subtitle file.</p>
            <button class="btn btn-primary align-bottom" type="button" @onclick="SelectInputSubtitleFile">@SelectFileButtonText @State.InputSubtitleFileName</button>
</div>
<hr>
                    <h2>Audio track options</h2>
            <div class="form-group">
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="useSox" checked="@_useSox" @onchange="@(() => _useSox = true)" />
                    <label class="form-check-label">Use SOX library (more accurate, but slower). SOX binaries should be provided in PATH system variable.</label>
</div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="useSox" checked="@(!_useSox)" @onchange="@(() => _useSox = false)" />
                    <label class="form-check-label">Use native Windows speech library (less accurate, but faster).</label>
                </div>
            </div>
            <div class="form-group">
                <label for="delay">Dubbing audio track delay (voice-over effect) in milliseconds:</label>
            <input type="number" id="delay" class="form-control" style="margin-bottom: 1rem;" @bind="_delay" />
            </div>

            <div class="form-group">
                <label for="originalTrackVolume">Original audio track volume</label>
            <input id="originalTrackVolume" type="range" min="0" max="100" class="slider" @bind="_originalTrackVolume" step="10" />
            </div>
            <hr>

            <h2>Save Options</h2>
            <div class="form-group">
            <label>Select path where to save modified video file.</label>
            <button class="btn btn align-bottom" type="button" @onclick="SelectOutputVideoFile">@SelectFileButtonText @State.OutputVideoFileName</button>
            </div>
            <button class="btn btn-primary align-bottom" type="button" @onclick="DubAsync" disabled="@((string.IsNullOrEmpty(State.OutputVideoFileName) || State.OutputVideoFileName == NoFileSelected) || (_isSubtitleButtonDisabled && State.InputSubtitleFileName == NoFileSelected) || _isDubbingInProgress)">Dub</button>
            @if (_isDubbingInProgress)
            {
                            <div class="progress mt-2" style="height: 2em;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" style="width: @(_progressValue)%; background-color: #204066;" aria-valuenow="@_progressValue" aria-valuemin="0" aria-valuemax="100">
                    </div>
                </div>
                <div>
                    <span id="progressLabel" class="text-muted">@_progressText</span>
                </div>
            }
                                </div>
        <NavLink class="btn btn-primary" href="/">Go Back</NavLink>
    </div>
</div>

@code {

    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public int Rate { get; set; }
    [Parameter]
    public int Volume { get; set; }

    private const string NoFileSelected = "No file selected", SelectFileButtonText = "Select file:", ErrorMessage = "Unexpected error has occured. Try restarting the application.";
    private const int DefaultDelay = 500, DefaultOriginalTrackVolume = 100;
    private DubbingService _dubbingService = new();
    private SubtitleService _subtitleService = new();
    private List<SubtitleStreamDescription> _subtitleList = new();
    private int _selectedSubtitleId = -1, _progressValue = 0, _delay = DefaultDelay, _originalTrackVolume = DefaultOriginalTrackVolume;
    private bool _isSubtitleButtonDisabled = true, _isDubbingInProgress = false, _useSox = true;
    private List<FileFormat> _supportedSubtitleFormats = new List<FileFormat>();
    private readonly FileFormat DefaultSubtitleFormat = new(FileFormat.DefaultSubtitleFileExtension, "SubRip");
    private string _selectedSubtitleFormat, _progressText;
    private string? _error;

    protected override void OnInitialized()
    {
        State.AppStateChanged += State_AppStateChanged;
        State.InputSubtitleFileName = NoFileSelected;
        State.OutputSubtitleFileName = NoFileSelected;
        if (string.IsNullOrEmpty(State.OutputVideoFileName))
        {
            State.OutputVideoFileName = Path.Combine(Path.GetDirectoryName(State.InputVideoFileName), Path.GetFileNameWithoutExtension(State.InputVideoFileName)) + " (with audio subtitles)" + Path.GetExtension(State.InputVideoFileName);
        }
        FillSupportedFormats();

        _dubbingService.VoiceName = Name;
        _dubbingService.VoiceRate = Rate;
        _dubbingService.VoiceVolume = Volume;

        try
        {
            _subtitleList = _subtitleService.GetSubtitleList(State.InputVideoFileName);
        }
        catch (Exception ex)
        {
            _error = ErrorMessage;
        }
    }

    private async Task DubAsync()
    {
        _isDubbingInProgress = true;
        var inputSubtitleFileName = State.InputSubtitleFileName != NoFileSelected ? State.InputSubtitleFileName : string.Empty;
        var progress = new Progress<string>(progressValue =>
        {
            var values = progressValue.Split(Environment.NewLine);
            if (values.Length == 2)
            {
                var stateChanged = false;
                int percent;
                var parsedResult = int.TryParse(values[1], out percent);
                if (parsedResult)
                {
                    if (_progressValue != percent)
                    {
                        _progressValue = percent;
                        stateChanged= true;
                    }
                }
                if (_progressText != values[0])
                {
                    _progressText = values[0];
                    stateChanged = true;
                }
                if (stateChanged)
                {
                    StateHasChanged();
                }
            }
        });

        try
        {
            if (string.IsNullOrEmpty(inputSubtitleFileName))
            {
                await Task.Run(() => _dubbingService.Dub(_selectedSubtitleId, State.InputVideoFileName, State.OutputVideoFileName, _useSox, _delay, _originalTrackVolume, progress));
            }
            else
            {
                await Task.Run(() => _dubbingService.Dub(inputSubtitleFileName, State.InputVideoFileName, State.OutputVideoFileName, _useSox, _delay, _originalTrackVolume, progress));
            }
        }
        catch (Exception ex)
        {
            _error = ErrorMessage;
        }
        finally
        {
            _isDubbingInProgress = false;
        }
    }

    private void SelectInputSubtitleFile()
    {
        State.AppState = StateType.SelectInputSubtitleFile;
    }

    private void SelectOutputVideoFile()
    {
        State.AppState = StateType.SelectOutputVideoFile;
    }

    private void SelectOutputSubtitleFile()
    {
        State.AppState = StateType.SelectOutputSubtitleFile;
    }

    private void State_AppStateChanged(object sender, EventArgs e)
    {
        StateType appState = (StateType)sender;
        switch (appState)
        {
            case StateType.SelectedOutputSubtitleFile:
                if (!string.IsNullOrEmpty(State.OutputSubtitleFileName))
                {
                    try
                    {
                        _subtitleService.DownloadSubtitle(State.InputVideoFileName, State.OutputSubtitleFileName, _selectedSubtitleFormat, _selectedSubtitleId);
                    }
                    catch (Exception ex)
                    {
                        _error = ErrorMessage;
                    }
                }
                break;
            default:
                break;
        }
    }

    private void EnableGetSubtitleButton()
    {
        _isSubtitleButtonDisabled = _selectedSubtitleId < 0;
    }

    private void FillSupportedFormats()
    {
        _supportedSubtitleFormats.Add(DefaultSubtitleFormat);
        _selectedSubtitleFormat = DefaultSubtitleFormat.Extension;
    }
        }