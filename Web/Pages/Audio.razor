@page "/audio"
@using SubtitleDubber.Services
@using SubtitleDubber.Models
@using SubtitleDubber.Parsers
@using Web.Data
@using System.IO

@inject NavigationManager Navigation
<PageTitle>Subtitle Dubber</PageTitle>
        <div class="col-md-8 mx-auto">
                <div class="card" style="margin: auto; max-width: 500px; min-height: 16rem;">
        <div class="card-body">
                        <h1>Subtitle Options</h1>
            <label for="subtitle">Select which subtitle stream to use for making audio track:</label>
            <select id="subtitle" @bind="@_selectedSubtitleId" @bind:after="EnableGetSubtitleButton">
                <option value="-1"></option>

                @if (_subtitleList != null)
                {
                    foreach (var subtitle in _subtitleList)
                    {
                        <option value="@subtitle.Id">@subtitle</option>
                    }
                }
            </select>
            <label for="conversion">Subtitle format:</label>
            <select id="conversion" @bind="_selectedSubtitleFormat">
                <option value="srt">SubRip SRT</option>
            </select>
            <button class="btn btn-primary align-bottom" type="button" disabled=@_getSubtitleButtonDisabled @onclick="SelectOutputSubtitleFile">Get</button>
            <p>Or you can attach your own subtitle file:</p>
            <button class="btn btn-primary align-bottom" type="button" @onclick="SelectInputSubtitleFile">Choose file</button>
            <label>Selected file: @State.InputSubtitleFileName</label>
            <hr />

            <button class="btn btn-primary align-bottom" type="button" @onclick="SelectOutputVideoFile">Choose output video file</button>
            <label>Selected file: @State.OutputVideoFileName</label>

            <button class="btn btn-primary align-bottom" type="button" @onclick="DubAsync" disabled="@(string.IsNullOrEmpty(State.OutputVideoFileName) || (_getSubtitleButtonDisabled && string.IsNullOrEmpty(State.InputSubtitleFileName)))">Generate</button>

                                </div>
        <NavLink class="btn btn-primary" href="/">Go Back</NavLink>
    </div>
</div>
@code {
    private DubbingService _dubbingService = new();
    private SubtitleService _subtitleService = new();
    private List<SubtitleStreamDescription> _subtitleList = new();
    private int _selectedSubtitleId = -1;
    private string _selectedSubtitleFormat = "srt";
    private bool _getSubtitleButtonDisabled = true;
    private const string TemporarySubtitleFileName = "subtitle.srt";
    private const string PathSeparator = "\\";

    protected override void OnInitialized()
    {
        _subtitleList = _subtitleService.GetSubtitleList(State.InputVideoFileName);
        State.AppStateChanged += State_AppStateChanged;
        State.InputSubtitleFileName = string.Empty;
        State.OutputSubtitleFileName = string.Empty;
    }

    private async Task DubAsync()
    {
        //        var tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        var tempDirectory = "C:\\hardas\\SubtitleDubber";
        Directory.CreateDirectory(tempDirectory);
        var inputSubtitleFileName = State.InputSubtitleFileName;
        if (string.IsNullOrEmpty(inputSubtitleFileName))
        {
            inputSubtitleFileName = tempDirectory + PathSeparator + TemporarySubtitleFileName;
            _subtitleService.DownloadSubtitle(State.InputVideoFileName, inputSubtitleFileName, _selectedSubtitleFormat, _selectedSubtitleId);
        }
        var parser = new SrtParser();
        var subtitles = parser.Parse(inputSubtitleFileName);
        var outputVideoFileName = tempDirectory + "\\video.mkv";
        //https://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html
        // for progress reports

        await Task.Run(() => _dubbingService.CreateSubtitleFiles(subtitles, tempDirectory));
    }

    private void SelectInputSubtitleFile()
    {
        State.AppState = StateType.SelectInputSubtitleFile;
    }

    private void SelectOutputVideoFile()
    {
        State.AppState = StateType.SelectOutputVideoFile;
    }

    private void SelectOutputSubtitleFile()
    {
        State.AppState = StateType.SelectOutputSubtitleFile;
    }

    private void State_AppStateChanged(object sender, EventArgs e)
    {
        StateType appState = (StateType)sender;
        switch (appState)
        {
            case StateType.SelectedOutputSubtitleFile:
                if (!string.IsNullOrEmpty(State.OutputSubtitleFileName))
                {
                    _subtitleService.DownloadSubtitle(State.InputVideoFileName, State.OutputSubtitleFileName, _selectedSubtitleFormat, _selectedSubtitleId);
                }
                break;
            default:
                break;
        }
    }

    private void EnableGetSubtitleButton()
    {
        _getSubtitleButtonDisabled = _selectedSubtitleId < 0;
    }
        }