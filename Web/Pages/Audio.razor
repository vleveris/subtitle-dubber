@page "/audio"
@using SubtitleDubber.Utils
@using SubtitleDubber.Models
@using SubtitleDubber.Parsers
@using Web.Data
@using System.IO

@inject NavigationManager Navigation
<PageTitle>Subtitle Dubber</PageTitle>
        <div class="col-md-8 mx-auto">
                <div class="card" style="margin: auto; max-width: 500px; min-height: 16rem;">
                    <div class="card-header d-flex">
                        <h1>Subtitle Options</h1>
            <label for="subtitle">Select which subtitle stream to use for making audio track:</label>
            <select id="subtitle" @bind="@_selectedSubtitleId" @bind:after="EnableGetSubtitleButton">
                <option value="-1"></option>

                @if (_subtitleList != null)
                {
                    foreach (var subtitle in _subtitleList)
                    {
                        <option value="@subtitle.Id">@subtitle</option>
                    }
                }
            </select>
            <label for="conversion">Subtitle format:</label>
            <select id="conversion" @bind="_selectedSubtitleFormat">
                <option value="srt">SubRip SRT</option>
            </select>
            <button class="btn btn-primary align-bottom" type="button" disabled=@_getSubtitleButtonDisabled @onclick="GetSubtitle">Get</button>
            <p>Or you can attach your own subtitle file:</p>
            <button class="btn btn-primary align-bottom" type="button" @onclick="SelectSubtitleInputFile">Choose file:</button>
            <label>Selected file: @State.InputSubtitleFileName</label>
            <hr />

            <button class="btn btn-primary align-bottom" type="button" @onclick="SelectVideoOutputFile">Choose output video file:</button>
            <label>Selected file: @State.OutputVideoFileName</label>

            <button class="btn btn-primary align-bottom" type="button" @onclick="AddAudioToVideo" disabled="@(string.IsNullOrEmpty(State.OutputVideoFileName) || (_getSubtitleButtonDisabled && string.IsNullOrEmpty(State.InputSubtitleFileName)))">Generate</button>

                                </div>
    </div>
</div>
@code {
    private AudioUtils _audioUtils = new();
    private List<SubtitleStreamDescription> _subtitleList = new();
    private int _selectedSubtitleId = -1;
    private string _selectedSubtitleFormat = "srt";
    private bool _getSubtitleButtonDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        _subtitleList = _audioUtils.GetSubtitleList(State.InputVideoFileName);
        State.AppStateChanged += State_AppStateChanged;
        State.OutputVideoFileName = string.Empty;
        State.OutputSubtitleFileName = string.Empty;
        State.InputSubtitleFileName = string.Empty;
    }

    private void AddAudioToVideo()
    {
        //        string tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        var tempDirectory = "C:\\hardas\\SubtitleDubber";
        Directory.CreateDirectory(tempDirectory);
        var inputSubtitleFileName = State.InputSubtitleFileName;
        if (string.IsNullOrEmpty(inputSubtitleFileName))
        {
            inputSubtitleFileName = tempDirectory + "\\subtitle.srt";
            _audioUtils.DownloadSubtitle(State.InputVideoFileName, inputSubtitleFileName, _selectedSubtitleFormat, _selectedSubtitleId);
        }
        var parser = new SrtParser();
        var subtitles = parser.Parse(inputSubtitleFileName);
        var outputVideoFileName = tempDirectory + "\\video.mkv";
        _audioUtils.CreateSubtitleFiles(subtitles, tempDirectory);
    }

    private void SelectSubtitleInputFile()
    {
        State.AppState = 3;
    }

    private void SelectVideoOutputFile()
    {
        State.AppState = 2;
    }

    private void GetSubtitle()
    {
        State.AppState = 4;
    }

    private void State_AppStateChanged(object sender, EventArgs e)
    {
        int appState = (int)sender;
        switch (appState)
        {
            case 5:
                if (!string.IsNullOrEmpty(State.OutputSubtitleFileName))
                {
                    _audioUtils.DownloadSubtitle(State.InputVideoFileName, State.OutputSubtitleFileName, _selectedSubtitleFormat, _selectedSubtitleId);
                }
                break;
            default:
                break;
        }
    }

    private void EnableGetSubtitleButton()
    {
        _getSubtitleButtonDisabled = _selectedSubtitleId < 0;
    }
        }