@page "/"
@using SubtitleDubber.Services
@using SubtitleDubber.Models
@using Web.Data

@inject NavigationManager Navigation
<PageTitle>Subtitle Dubber</PageTitle>
        <div class="col-md-8 mx-auto">
                <div class="card" style="margin: auto; max-width: 500px; min-height: 16rem;">
                    <div class="card-header d-flex">
<h1>Welcome to subtitle dubber!</h1>
        </div>
                    <div class="card-body">
            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <div class="alert alert-danger">
                    @_error
                </div>
            }
            <p>This tool allows you to easily add autogenerated audio track from film subtitles using SAPI5 TTS voices.</p>
<p>First, add video file and configure speech synthesizer.</p>
<h2>Video file</h2>
            <button class="btn btn-primary align-bottom" type="button" @onclick="SelectInputVideoFile">@SelectFileButtonText @State.InputVideoFileName</button>
<hr/>
<h2>TTS Settings</h2>
<label for="text">Test speech:</label>
            <textarea id="text" @bind="@_text" style="margin-bottom: 1rem;" rows="2" cols="50"/>
            <button class="btn btn-primary align-bottom" type="button" @onclick="SpeakText">Speak</button>
            <hr />

            <label for="voice">Select voice:</label>
            <select id="voice" @bind="_selectedVoiceName" @bind:after="SetVoice">
                @if (_voices != null)
                {
                    @foreach (var voice in _voices)
                    {
                        <option value="@voice.Name">@voice.Name - @voice.Language</option>
                    }
                }
                        </select>
<h3>Selected voice information</h3>
<ul>
                <li>ID: @_selectedVoice.Id</li>
                <li>Name: @_selectedVoice.Name</li>
    <li>Language: @_selectedVoice.Language</li>
<li>Gender: @_selectedVoice.Gender</li>
<li>Age: @_selectedVoice.Age</li>
<li>Description: @_selectedVoice.Description</li>
                @foreach (var key in _selectedVoice.AdditionalInfo.Keys)
                {
if (key != "Name" && key != "Gender" && key != "Age" && key != "Language")
                    {
                    <li>@String.Format("{0}: {1}", key, _selectedVoice.AdditionalInfo[key])</li>
                    }
                }
            </ul>
<hr/>
<label for="rate">Rate</label>
            <input id="rate" type="range" min="0" max="100" class="slider" @bind = "_rate" @bind:after="SetRate" step="5" />
            <label for="volume">Volume</label>
            <input id="volume" type="range" min="0" max="100" class="slider" @bind="_volume" @bind:after="SetVolume" />
<hr/>
            <button class="btn btn-primary align-bottom" type="button" disabled="@(string.IsNullOrEmpty(State.InputVideoFileName) || State.InputVideoFileName == NoFileSelected)" @onclick="NavigateToAudioPage">Continue</button>
        </div>
    </div>
</div>

@code {
    private const string NoFileSelected = "No file selected", SelectFileButtonText = "Select file:", ErrorMessage = "Unexpected error has occured. Try restarting the application.", AudioPageVoiceNameParameter = "{name}", AudioPageVoiceRateParameter = "{rate}", AudioPageVoiceVolumeParameter = "{volume}",    AudioPage = "/audio/" + AudioPageVoiceNameParameter + "/" + AudioPageVoiceRateParameter + "/" + AudioPageVoiceVolumeParameter;
    private SpeechService _speechService;
    private List<VoiceInfo> _voices = new List<VoiceInfo>();
    private VoiceInfo _selectedVoice;
    private string _selectedVoiceName, _text = string.Empty;
    private string? _error;
    private int _rate = 50, _volume = 100;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(State.InputVideoFileName))
        {
            State.InputVideoFileName = NoFileSelected;
        }

        try
        {
            _speechService = new();
            _voices = _speechService.GetInstalledVoices();
            _selectedVoiceName = _speechService.GetVoiceName();
            SetVoice();
        }
        catch (Exception ex)
        {
            _error = ErrorMessage;
        }
    }

    private void SelectInputVideoFile()
    {
        State.AppState = StateType.SelectInputVideoFile;
    }

    private void SetVoice()
    {
        try
        {
            _speechService.SetVoice(_selectedVoiceName);
            _selectedVoice = _voices.Find(v => v.Name == _selectedVoiceName);
        }
        catch (Exception ex)
        {
            _error = ErrorMessage;
        }
    }

    private void SpeakText()
    {
        try
        {
            _speechService.Speak(_text);
        }
        catch(Exception ex)
        {
            _error = ErrorMessage;
        }
    }

    private void SetRate()
    {
        try
        {
            _speechService.SetRate(-10 + _rate / 5);
        }
        catch (Exception ex)
        {
            _error = ErrorMessage;
        }
    }

    private void SetVolume()
    {
try
{
            _speechService.SetVolume(_volume);
        }
        catch (Exception ex)
        {
            _error = ErrorMessage;
        }
    }

    private void NavigateToAudioPage()
    {
        Navigation.NavigateTo(AudioPage.Replace(AudioPageVoiceNameParameter, _selectedVoiceName)
            .Replace(AudioPageVoiceRateParameter, (-10 + _rate / 5).ToString()).Replace(AudioPageVoiceVolumeParameter, _volume.ToString()));
    }
}